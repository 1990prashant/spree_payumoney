module Spree
  class PayumoneyController < StoreController
    protect_from_forgery only: :index
    
    def index
      @productinfo = 'apparel'
      @surl = payumoney_confirm_url
      @furl = payumoney_cancel_url
      
      payment_method = Spree::PaymentMethod.find(params[:payment_method_id])
      
      @payment = current_order.payments
      @service_url = payment_method.provider.service_url
      @merchant_key = payment_method.preferred_merchant_id

      @txnid = payment_method.txnid(current_order)
      @amount = current_order.total.to_s
      @email = current_order.email
      
      if(address = current_order.bill_address || current_order.ship_address)
        @phone = address.phone #udf2
        @firstname = address.firstname
        @lastname = address.lastname #udf1
        @city = address.city #udf3
      end
      #filling up all udfs
      #not sure if necessary by offsite payments
      @payment_method_id = params[:payment_method_id] #udf4
      
      @checksum = payment_method.checksum([@txnid, @amount, @productinfo, @firstname, @email, @lastname, @phone, @city, @payment_method_id, '', '', '', '', '', '']);
    end
    def confirm
      payment_method = Spree::PaymentMethod.find(params[:udf4])
      
      Spree::LogEntry.create({
        source: payment_method,
        details: params.inspect
      })
      
      order = current_order || raise(ActiveRecord::RecordNotFound)
      #TODO: confirm for correct hash and order amount requested before marking an payment as 'complete'
      #TODO: mark payment as complete
      order.next
      order.update_attributes({:state => "complete", :completed_at => Time.now})

      order.payments.create!({
        source_type: 'Spree::Gateway::Payumoney',#could be something generated by system
        amount: order.total,
        payment_method: payment_method
      })
      
      if order.complete?
        order.update!
        flash.notice = Spree.t(:order_processed_successfully)
        flash[:order_completed] = true
        
        redirect_to order_path(order, :token => order.guest_token)
      else
        redirect_to checkout_state_path(order.state)
      end
    end
    def cancel
      #log some entry into table
      Spree::LogEntry.create({
        source: 'Spree::Gateway::Payumoney',
        details: params.inspect
      })
      
      flash[:notice] = "Don't want to use Payumoney? No problems."
      #redirect to payment path and ask user to complete checkout
      #with different payment method
      redirect_to checkout_state_path(current_order.state)
    end
  end
end